// python3 -m grpc.tools.protoc bittensor/_proto/bittensor.proto  -I. --python_out=. --grpc_python_out=. --proto_path bittensor/_proto/
syntax = "proto3";

service TextPrompting  {
    rpc Forward (ForwardTextPromptingRequest) returns (ForwardTextPromptingResponse) {}
    rpc Backward (BackwardTextPromptingRequest) returns (BackwardTextPromptingResponse) {}
}

service QA {
	rpc Forward (ForwardQARequest) returns (ForwardQAResponse) {}
	rpc Backward (BackwardQARequest) returns (BackwardQAResponse) {}
}

service SentenceSimilarity {
	rpc Forward (ForwardSentenceSimilarityRequest) returns (ForwardSentenceSimilarityResponse) {}
	rpc Backward (BackwardSentenceSimilarityRequest) returns (BackwardSentenceSimilarityResponse) {}
}

service Text {
	rpc Forward (ForwardTextRequest) returns (ForwardTextResponse) {}
	rpc Backward (BackwardTextRequest) returns (BackwardTextResponse) {}
}

service VisualQA {
	rpc Forward (ForwardVisualQARequest) returns (ForwardVisualQAResponse) {}
	rpc Backward (BackwardVisualQARequest) returns (BackwardVisualQAResponse) {}
}

service TextToImage {
	rpc Forward (ForwardTextToImageRequest) returns (ForwardTextToImageResponse) {}
	rpc Backward (BackwardTextToImageRequest) returns (BackwardTextToImageResponse) {}
}

service ImageToText {
	rpc Forward (ForwardImageToTextRequest) returns (ForwardImageToTextResponse) {}
	rpc Backward (BackwardImageToTextRequest) returns (BackwardImageToTextResponse) {}
}


service ObjectDetection {
	rpc Forward (ForwardObjectDetectionRequest) returns (ForwardObjectDetectionResponse) {}
	rpc Backward (BackwardObjectDetectionRequest) returns (BackwardObjectDetectionResponse) {}
}

service ImageClassification {
	rpc Forward (ForwardImageClassificationRequest) returns (ForwardImageClassificationResponse) {}
	rpc Backward (BackwardImageClassificationRequest) returns (BackwardImageClassificationResponse) {}
}

service ImageSegmentation {
	rpc Forward (ForwardImageSegmentationRequest) returns (ForwardImageSegmentationResponse) {}
	rpc Backward (BackwardImageSegmentationRequest) returns (BackwardImageSegmentationResponse) {}
}

service DepthEstimation {
	rpc Forward (ForwardDepthEstimationRequest) returns (ForwardDepthEstimationResponse) {}
	rpc Backward (BackwardDepthEstimationRequest) returns (BackwardDepthEstimationResponse) {}
}

service SpeechToText {
	rpc Forward (ForwardSpeechToTextRequest) returns (ForwardSpeechToTextResponse) {}
	rpc Backward (BackwardSpeechToTextRequest) returns (BackwardSpeechToTextResponse) {}
}

service TextToSpeech {
	rpc Forward (ForwardTextToSpeechRequest) returns (ForwardTextToSpeechResponse) {}
	rpc Backward (BackwardTextToSpeechRequest) returns (BackwardTextToSpeechResponse) {}
}




/////////////////////////
// TextPrompting //
/////////////////////////
message ForwardTextPromptingRequest {
    int32 version = 1;
    string hotkey = 2;
    repeated string messages = 3;
    float timeout = 4;
}
message ForwardTextPromptingResponse {
    int32 version = 1;
    string hotkey = 2;
    string response = 3;
	string return_message = 4;
	ReturnCode return_code = 5;
}
message BackwardTextPromptingRequest {
    int32 version = 1;
    string hotkey = 2;
	repeated float rewards = 3;
	repeated string messages = 4;
	string response = 5;
    float timeout = 6;
}
message BackwardTextPromptingResponse {
    int32 version = 1;
    string hotkey = 2;
	string return_message = 4;
	ReturnCode return_code = 5;
}

/////////////////////////
// Q&A //
/////////////////////////
message ForwardQARequest {
	int32 version = 1;
	string hotkey = 2;
	string question = 3;
	string context = 4;
	float timeout = 5;
}

message ForwardQAResponse {
	int32 version = 1;
	string hotkey = 2;
	string answer = 3;
	string return_message = 4;
	ReturnCode return_code = 5;
}

message BackwardQARequest {
	int32 version = 1;
	string hotkey = 2;
	float reward = 3;
	string question = 4;
	string answer = 5;
	float timeout = 6;
}

message BackwardQAResponse {
	int32 version = 1;
	string hotkey = 2;
	string return_message = 4;
	ReturnCode return_code = 5;
}

/////////////////////////
// Sentence Similarity //
/////////////////////////

message ForwardSentenceSimilarityRequest {
	int32 version = 1;
	string hotkey = 2;
	string source_sentence = 3;
	string target_sentence = 4;
	float timeout = 5;
}

message ForwardSentenceSimilarityResponse {
	int32 version = 1;
	string hotkey = 2;
	float similarity = 3;
	string return_message = 4;
	ReturnCode return_code = 5;
}

message BackwardSentenceSimilarityRequest {
	int32 version = 1;
	string hotkey = 2;
	float reward = 3;
	string source_sentence = 4;
	string target_sentence = 5;
	float timeout = 6;
}

message BackwardSentenceSimilarityResponse {
	int32 version = 1;
	string hotkey = 2;
	string return_message = 4;
	ReturnCode return_code = 5;
}

/////////////////////////
// Text (text classification, token classification, text2text-generation, summarization, translation) //
/////////////////////////

message ForwardTextRequest {
	int32 version = 1;
	string hotkey = 2;
	string text = 3;
	float timeout = 4;
}

message ForwardTextResponse {
	int32 version = 1;
	string hotkey = 2;
	string response = 3;
	string return_message = 4;
	ReturnCode return_code = 5;
}

message BackwardTextRequest {
	int32 version = 1;
	string hotkey = 2;
	float reward = 3;
	string text = 4;
	string response = 5;
	float timeout = 6;
}

message BackwardTextResponse {
	int32 version = 1;
	string hotkey = 2;
	string return_message = 4;
	ReturnCode return_code = 5;
}

///////////////////////////////
// Visual Q&A + Document Q&A //
///////////////////////////////

// TODO: rename to a generic name

message ForwardVisualQARequest {
	int32 version = 1;
	string hotkey = 2;
	string question = 3;
	bytes image = 4;
	float timeout = 5;
}

message ForwardVisualQAResponse {
	int32 version = 1;
	string hotkey = 2;
	string answer = 3;
	string return_message = 4;
	ReturnCode return_code = 5;
}

message BackwardVisualQARequest {
	int32 version = 1;
	string hotkey = 2;
	float reward = 3;
	string question = 4;
	bytes image = 5;
	string answer = 6;
	float timeout = 7;
}

message BackwardVisualQAResponse {
	int32 version = 1;
	string hotkey = 2;
	string return_message = 4;
	ReturnCode return_code = 5;
}

/////////////////////////
// Text-to-Image //
/////////////////////////

message ForwardTextToImageRequest {
	int32 version = 1;
	string hotkey = 2;
	string prompt = 3;
	float timeout = 4;
}

message ForwardTextToImageResponse {
	int32 version = 1;
	string hotkey = 2;
	bytes image = 3;
	string return_message = 4;
	ReturnCode return_code = 5;
}

message BackwardTextToImageRequest {
	int32 version = 1;
	string hotkey = 2;
	float reward = 3;
	string prompt = 4;
	bytes image = 5;
	float timeout = 6;
}

message BackwardTextToImageResponse {
	int32 version = 1;
	string hotkey = 2;
	string return_message = 4;
	ReturnCode return_code = 5;
}

/////////////////////////
// Image Segmentation //
/////////////////////////

message ForwardImageSegmentationRequest {
	int32 version = 1;
	string hotkey = 2;
	bytes image = 3;
	float timeout = 4;
}

message ForwardImageSegmentationResponse {
	int32 version = 1;
	string hotkey = 2;
	bytes response = 3;
	string return_message = 4;
	ReturnCode return_code = 5;
}

message BackwardImageSegmentationRequest {
	int32 version = 1;
	string hotkey = 2;
	float reward = 3;
	bytes image = 4;
	bytes response = 5;
	float timeout = 6;
}

message BackwardImageSegmentationResponse {
	int32 version = 1;
	string hotkey = 2;
	string return_message = 4;
	ReturnCode return_code = 5;
}

/////////////////////////
// Depth Estimation //
/////////////////////////

message ForwardDepthEstimationRequest {
	int32 version = 1;
	string hotkey = 2;
	bytes image = 3;
	float timeout = 4;
}

message ForwardDepthEstimationResponse {
	int32 version = 1;
	string hotkey = 2;
	bytes response = 3;
	string return_message = 4;
	ReturnCode return_code = 5;
}

message BackwardDepthEstimationRequest {
	int32 version = 1;
	string hotkey = 2;
	float reward = 3;
	bytes image = 4;
	bytes response = 5;
	float timeout = 6;
}

message BackwardDepthEstimationResponse {
	int32 version = 1;
	string hotkey = 2;
	string return_message = 4;
	ReturnCode return_code = 5;
}


/////////////////////////
// Object Detection //
/////////////////////////

message ForwardObjectDetectionRequest {
	int32 version = 1;
	string hotkey = 2;
	bytes image = 3;
	float timeout = 4;
}

message ForwardObjectDetectionResponse {
	int32 version = 1;
	string hotkey = 2;
	bytes response = 3;
	string predicted = 4;
	string return_message = 5;
	ReturnCode return_code = 6;
}

message BackwardObjectDetectionRequest {
	int32 version = 1;
	string hotkey = 2;
	float reward = 3;
	bytes image = 4;
	bytes response = 5;
	float timeout = 6;
}

message BackwardObjectDetectionResponse {
	int32 version = 1;
	string hotkey = 2;
	string return_message = 4;
	ReturnCode return_code = 5;
}

/////////////////////////
// Image Classification //
/////////////////////////

message ForwardImageClassificationRequest {
	int32 version = 1;
	string hotkey = 2;
	bytes image = 3;
	float timeout = 4;
}

message ForwardImageClassificationResponse {
	int32 version = 1;
	string hotkey = 2;
	bytes response = 3;
	string return_message = 4;
	ReturnCode return_code = 5;
}

message BackwardImageClassificationRequest {
	int32 version = 1;
	string hotkey = 2;
	float reward = 3;
	bytes image = 4;
	bytes response = 5;
	float timeout = 6;
}

message BackwardImageClassificationResponse {
	int32 version = 1;
	string hotkey = 2;
	string return_message = 4;
	ReturnCode return_code = 5;
}

/////////////////////////
// Image to Text //
/////////////////////////

message ForwardImageToTextRequest {
	int32 version = 1;
	string hotkey = 2;
	bytes image = 3;
	float timeout = 4;
}

message ForwardImageToTextResponse {
	int32 version = 1;
	string hotkey = 2;
	string response = 3;
	string return_message = 4;
	ReturnCode return_code = 5;
}

message BackwardImageToTextRequest {
	int32 version = 1;
	string hotkey = 2;
	float reward = 3;
	bytes image = 4;
	string response = 5;
	float timeout = 6;
}

message BackwardImageToTextResponse {
	int32 version = 1;
	string hotkey = 2;
	string return_message = 4;
	ReturnCode return_code = 5;
}

/////////////////////////
// Text to Speech //
/////////////////////////

message ForwardTextToSpeechRequest {
	int32 version = 1;
	string hotkey = 2;
	string text = 3;
	float timeout = 4;
}

message ForwardTextToSpeechResponse {
	int32 version = 1;
	string hotkey = 2;
	bytes audio = 3;
	string return_message = 4;
	ReturnCode return_code = 5;
}

message BackwardTextToSpeechRequest {
	int32 version = 1;
	string hotkey = 2;
	float reward = 3;
	string text = 4;
	bytes audio = 5;
	float timeout = 6;
}

message BackwardTextToSpeechResponse {
	int32 version = 1;
	string hotkey = 2;
	string return_message = 4;
	ReturnCode return_code = 5;
}

/////////////////////////
// Speech to Text //
/////////////////////////

message ForwardSpeechToTextRequest {
	int32 version = 1;
	string hotkey = 2;
	bytes audio = 3;
	float timeout = 4;
}

message ForwardSpeechToTextResponse {
	int32 version = 1;
	string hotkey = 2;
	string response = 3;
	string return_message = 4;
	ReturnCode return_code = 5;
}

message BackwardSpeechToTextRequest {
	int32 version = 1;
	string hotkey = 2;
	float reward = 3;
	bytes audio = 4;
	string response = 5;
	float timeout = 6;
}

message BackwardSpeechToTextResponse {
	int32 version = 1;
	string hotkey = 2;
	string return_message = 4;
	ReturnCode return_code = 5;
}






// Return codes from Backward and Forward call.
enum ReturnCode {
	NoReturn = 0; // Default Value
	Success = 1; // Successful query.
	Timeout = 2; // Request timeout.
	Backoff = 3; // Call triggered a backoff.
	Unavailable = 4; // Endpoint not available.
	NotImplemented = 5; // Modality not implemented.
	EmptyRequest = 6; // Request is empty.
	EmptyResponse = 7; // Response is empty.
	InvalidResponse = 8; // Request is invalid.
	InvalidRequest = 9; // Response is invalid.
	RequestShapeException = 10; // Request has invalid shape.
	ResponseShapeException = 11; // Response has invalid shape.
	RequestSerializationException = 12; // Request failed to serialize.
	ResponseSerializationException = 13; // Response failed to serialize.
	RequestDeserializationException = 14; // Request failed to deserialize.
	ResponseDeserializationException = 15; // Response failed to deserialize.
	NotServingNucleus = 16; // Receiving Neuron is not serving a Nucleus to query.
	NucleusTimeout = 17; // Processing on the server side timeout.
	NucleusFull = 18; // Returned when the processing queue on the server is full.
	RequestIncompatibleVersion = 19; // The request handler is incompatible with the request version.
	ResponseIncompatibleVersion = 20; // The request handler is incompatible with the request version.
	SenderUnknown = 21; // The requester is not known by the receiver.
	UnknownException = 22; // Unknown exception.
	Unauthenticated = 23; // Authentication failed.
	BadEndpoint = 24; // Dummy endpoint
	Blacklisted = 25; // Blacklisted
}

/////////////////
// TensorProto //
/////////////////
// A serialized tensor object created using the serializer class.
// SIZE: 32 bytes + variable buffer size.
message Tensor {
	// Version: [REQUIRED] Strictly increasing protocol version identifier.
	// Indentifies protocol version for backward compatibility.
	// i.e. '0.1.5' = (100 * 0) + (10 * 1) + (1 * 5) = 15
	int32 version = 1;

	// Buffer: [REQUIRED] Serialized raw tensor content.
	bytes buffer = 2;

	// Shape: [REQUIRED] Shape of this tensor.
	// NOTE: Variable dimensions (i.e. batch) are non-explicit here as -1.
	// ~ 5 * int32 = 128 bits - (16 bytes)
	repeated int64 shape = 3;

	// Serializer: [REQUIRED] Specifies the serialization/deserialization method.
	// Users should be able to decode all tensors by specifying the encoding type and the raw data. 
	// i.e.
	// 1. (client) serializer = bittensor.bittensor.serializer_for_type(bittensor.Serializer.MSGPACK)
	// 2. (client) serializer.serialize(torch.Tensor, from_type = bittensor.proto.TensorType.TORCH) --> bittensor.proto.Tensor
	// 3. (server) deserializer = bittensor.bittensor.serializer_for_type(request.serialzer)
	// 4. (server) deserializer.deserialize(request.tensor, to_type = bittensor.proto.TensorType.TENSORFLOW) --> tensorflow.Tensor    	
	// SIZE: 32-bits (4 bytes)
	Serializer serializer = 4;

	// TensorType: [REQUIRED] Purely a placeholder, not used in deserialization etc, 
	// however, could come in handy later
	// SIZE: 32-bits (4 bytes)
	TensorType tensor_type = 5;
    	
	// Dtype: [REQUIRED] The tensor datatype.
	// Used for serialization deserialization.
	// int32 32-bits (4-bytes)
	DataType dtype = 6;

	// Requires grad: [OPTIONAL] Does this tensor require a gradient.
	// 1 bit.
	bool requires_grad = 8;
}

enum Serializer {
	// PICKLE = 0; // PICKLE serializer (REMOVED for security reasons.)
	MSGPACK = 0; // MSGPACK serializer
	CMPPACK = 1; // CMPPACK serializer
}

// TensorType: [REQUIRED] The tensor type, for use between multipl frameworks.
enum TensorType {
	TORCH = 0; // Torch object
	TENSORFLOW = 1; // Tensorflow tensor type.
	NUMPY = 2; // Numpy tensor type.
}

// Dtype: [REQUIRED] The tensor datatype.
// Used for serialization deserialization.
// int32 32-bits (4-bytes)
enum DataType {
	UNKNOWN = 0;
	FLOAT32 = 1;
	FLOAT64 = 2;
	INT32 = 3;
	INT64 = 4;
	UTF8 = 5;
	FLOAT16 = 6;
	BOOL = 7;
}


